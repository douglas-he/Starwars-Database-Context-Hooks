{"version":3,"sources":["services/planetsApi.jsx","context/StarWarsContext.jsx","context/Provider.jsx","components/Thead.jsx","components/Tbody.jsx","components/NumericFilter.jsx","components/Table.jsx","App.js","index.js"],"names":["getPlanets","fetch","then","response","json","ok","Promise","resolve","reject","StarWarsContext","createContext","Provider","children","useState","isFetching","setIsFetching","error","setError","data","setData","name","column","order","filters","setFilters","filtredPlanets","setFiltredPlanets","useEffect","filtred","forEach","filter","numericValues","value","comparison","planet","Number","switchFunction","newArray","match","RegExp","nameMatch","arraySorted","length","array","includes","sort","a","b","sortArray","fetchSucess","results","fetchFail","Error","message","context","fetchPlanets","filterName","param","rest","addFilter","undefined","excludeFilter","excludeClick","removeFilter","filtersAscDesc","target","Thead","useContext","starWarsContext","Object","keys","map","infoPlanets","key","data-testid","type","onClick","Tbody","index","values","keyPlanet","i","NumericFilter","selectColumn","setSelectColumn","setColumn","setComparison","setValue","onExcludeFilter","onChange","columnFilters","renderColumnSelected","comparisonArray","comp","renderComparisonSelected","renderInput","onAddFilter","renderButtonFilter","col","num","e","renderFilterSelected","Table","border","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15c8c12c.chunk.js","sourcesContent":["const PLANET_API = 'https://cors-anywhere.herokuapp.com/https://swapi-trybe.herokuapp.com/api/planets';\n\nconst getPlanets = () => (\n  fetch(PLANET_API)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default getPlanets;\n","import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport getPlanets from '../services/planetsApi';\nimport starWarsContext from './StarWarsContext';\n\nconst sortArray = ({ column, order }, array) => {\n  const arrayNumberSort = ['rotation_period', 'orbital_period', 'diameter', 'surface_water', 'population'];\n  if (!arrayNumberSort.includes(column)) {\n    return ((order === 'ASC')\n      ? (array.sort((a, b) => ((a[column]) < (b[column]) ? -1 : 1)))\n      : (array.sort((a, b) => ((a[column] < b[column]) ? 1 : -1))));\n  }\n  return ((order === 'ASC')\n    ? (array.sort((a, b) => (Number(a[column]) < Number(b[column]) ? 1 : -1)))\n    : (array.sort((a, b) => (Number(a[column]) < Number(b[column]) ? -1 : 1))));\n};\n\nconst switchFunction = ({ numericValues = {} }, filtred) => {\n  const { column = '', value, comparison = '' } = numericValues;\n  switch (comparison) {\n    case 'menor que': {\n      return (filtred\n        .filter((planet) => Number(planet[column]) < Number(value)));\n    }\n    case 'maior que': {\n      return (filtred\n        .filter((planet) => Number(planet[column]) > Number(value)));\n    }\n    case 'igual a': {\n      return (filtred\n        .filter((planet) => Number(planet[column]) === Number(value)));\n    }\n    default: return filtred;\n  }\n};\n\nconst Provider = ({ children }) => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState([{\n    name: '',\n    column: 'name',\n    order: 'ASC',\n  }]);\n  const [filtredPlanets, setFiltredPlanets] = useState([]);\n\n\n  useEffect(() => {\n    const nameMatch = (name) => name.match(new RegExp(filters[0].name, 'i'));\n    let filtred = [...data];\n    filters.forEach((filter) => {\n      filtred = switchFunction(filter, filtred);\n    });\n    const newArray = filtred.filter(({ name }) => nameMatch(name));\n    const arraySorted = (filtred.length > 0) ? (sortArray(filters[0], newArray)) : [];\n    setFiltredPlanets(arraySorted);\n  }, [filters, data]);\n\n\n  const fetchSucess = ({ results }) => {\n    setData(results);\n    setFiltredPlanets(results);\n    setIsFetching(true);\n  };\n\n  const fetchFail = (Error) => {\n    setError(Error.message);\n    setIsFetching(true);\n  };\n\n  const fetchPlanets = () => {\n    getPlanets()\n      .then(fetchSucess, fetchFail);\n  };\n\n  const filtersAscDesc = (target) => {\n    const [param, ...rest] = filters;\n    param.column = target;\n    param.order = (param.order === 'ASC') ? 'DESC' : 'ASC';\n    setFilters([{ ...param }, ...rest]);\n  };\n\n  const filterName = (name) => {\n    const [param, ...rest] = filters;\n    param.name = name;\n    setFilters([{ ...param }, ...rest]);\n  };\n\n  const addFilter = (column, comparison, value) => {\n    setFilters((filters[0].numericValues !== undefined)\n      ? [...filters, { numericValues: { column, comparison, value } }]\n      : [{ ...filters[0], numericValues: { column, comparison, value } }]);\n  };\n\n  const excludeFilter = (excludeClick) => {\n    const { name, column, order } = filters[0];\n    const removeFilter = filters.filter(({ numericValues: { column: col } }) => (\n      col !== excludeClick));\n    removeFilter[0] = {\n      name, column, order, ...removeFilter[0],\n    };\n    setFilters(removeFilter);\n  };\n\n  const context = {\n    fetchPlanets,\n    isFetching,\n    error,\n    data,\n    filterName,\n    filtredPlanets,\n    addFilter,\n    filters,\n    excludeFilter,\n    filtersAscDesc,\n  };\n  return (\n    <starWarsContext.Provider value={context}>{children}</starWarsContext.Provider>\n  );\n};\n\nexport default Provider;\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React, { useContext } from 'react';\nimport starWarsContext from '../context/StarWarsContext';\n\nconst Thead = () => {\n  const { data, filtersAscDesc } = useContext(starWarsContext);\n  return (\n    <thead>\n      <tr>\n        {Object.keys(data[0])\n          .map((infoPlanets) => (infoPlanets !== 'residents')\n            && (\n              <th key={infoPlanets}>\n                <button\n                  data-testid={infoPlanets}\n                  type=\"button\"\n                  value={infoPlanets}\n                  onClick={({ target }) => filtersAscDesc(target.value)}\n                >\n                  {infoPlanets}\n                </button>\n              </th>\n            ))}\n      </tr>\n    </thead>\n  );\n};\n\nexport default Thead;\n","import React, { useContext } from 'react';\nimport starWarsContext from '../context/StarWarsContext';\n\nconst Tbody = () => {\n  const { filtredPlanets } = useContext(starWarsContext);\n  return (\n    <tbody>\n      {filtredPlanets.map((planet, index) => (\n        <tr data-testid={`planet${index}`} key={planet.name}>\n          {Object.values(planet)\n            .map((keyPlanet, i) => (Object.keys(planet)[i] !== 'residents')\n              && <td key={keyPlanet}>{keyPlanet}</td>)}\n        </tr>\n      ))}\n    </tbody>\n  );\n};\n\nexport default Tbody;\n","import React, { useState, useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nconst renderFilterSelected = (num, onExcludeFilter) => (\n  <div data-testid=\"infoExclude\" key={num.column}>\n    <span>{`${num.column} `}</span>\n    <span>{`${num.comparison} `}</span>\n    <span>{`${num.value} `}</span>\n    <button\n      data-testid=\"removeFilter\"\n      value={num.column}\n      onClick={(e) => onExcludeFilter(e.target.value)}\n      type=\"button\"\n    >\n      X\n    </button>\n  </div>\n);\n\nconst renderColumnSelected = (selectColumn, setColumn) => (\n  <select data-testid=\"column\" onChange={({ target }) => setColumn(target.value)}>\n    <option value=\"\" />\n    {selectColumn\n      .map((columnFilters) => <option key={columnFilters}>{columnFilters}</option>)}\n  </select>\n);\n\nconst renderComparisonSelected = (comparisonArray, setComparison) => (\n  (\n    <select data-testid=\"comparison\" onChange={({ target }) => setComparison(target.value)}>\n      <option value=\"\" />\n      {comparisonArray.map((comp) => <option key={comp} value={comp}>{comp}</option>)}\n    </select>\n  )\n);\n\nconst renderInput = (setValue) => (\n  <input data-testid=\"value\" type=\"number\" onChange={({ target }) => setValue(target.value)} />);\nconst renderButtonFilter = (onAddFilter) => (\n  <button type=\"button\" data-testid=\"filter\" onClick={onAddFilter}>Filtrar</button>);\n\nconst NumericFilter = () => {\n  const [selectColumn, setSelectColumn] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  const comparisonArray = ['maior que', 'menor que', 'igual a'];\n  const [column, setColumn] = useState('');\n  const [comparison, setComparison] = useState('');\n  const [value, setValue] = useState('');\n  const { addFilter, filters, excludeFilter } = useContext(StarWarsContext);\n\n  const onAddFilter = () => {\n    setSelectColumn(selectColumn.filter((col) => col !== column));\n    addFilter(column, comparison, value); setColumn(''); setComparison(''); setValue('');\n  };\n\n  const onExcludeFilter = (param) => {\n    setSelectColumn([...selectColumn, param]); excludeFilter(param);\n  };\n\n  return (\n    <div>\n      {selectColumn.length > 0 && (\n      <div>\n        {renderColumnSelected(selectColumn, setColumn)}\n        {column && renderComparisonSelected(comparisonArray, setComparison)}\n        {comparison && renderInput(setValue)}\n        {value && renderButtonFilter(onAddFilter)}\n      </div>\n      )}\n      <div>\n        {(filters[0].numericValues) && filters.map(({ numericValues: num }) => (\n          renderFilterSelected(num, onExcludeFilter)))}\n      </div>\n    </div>\n  );\n};\n\nexport default NumericFilter;\n","import React, { useContext, useEffect } from 'react';\nimport starWarsContext from '../context/StarWarsContext';\nimport Thead from './Thead';\nimport Tbody from './Tbody';\nimport NumericFilter from './NumericFilter';\n\nconst Table = () => {\n  const {\n    fetchPlanets, error, isFetching, filterName,\n  } = useContext(starWarsContext);\n  useEffect(fetchPlanets, []);\n  if (!isFetching) return <h1>Loading</h1>;\n  return (error\n    || (\n      <div>\n        <h1>Starwars Planets</h1>\n        <input\n          data-testid=\"input-name\"\n          type=\"text\"\n          onChange={({ target: { value } }) => filterName(value)}\n        />\n        <NumericFilter />\n        <table border=\"1px\">\n          <Thead />\n          <Tbody />\n        </table>\n      </div>\n    )\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport Provider from './context/Provider';\nimport Table from './components/Table';\n\nfunction App() {\n  return (\n    <Provider>\n      <Table />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}